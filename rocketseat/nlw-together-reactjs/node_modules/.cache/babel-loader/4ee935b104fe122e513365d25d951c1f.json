{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { database } from \"../services/firebase\";\nimport { useAuth } from \"./useAuth\";\nexport function useRoom(roomId) {\n  _s();\n\n  const {\n    user\n  } = useAuth();\n  const [questions, setQuestions] = useState([]);\n  const [title, setTitle] = useState('');\n  useEffect(() => {\n    const roomRef = database.ref(`rooms/${roomId}`);\n    roomRef.on('value', room => {\n      var _databaseRoom$questio;\n\n      const databaseRoom = room.val();\n      const firebaseQuestions = (_databaseRoom$questio = databaseRoom.questions) !== null && _databaseRoom$questio !== void 0 ? _databaseRoom$questio : {};\n      const parsedQuestion = Object.entries(firebaseQuestions).map(_ref => {\n        var _value$likes, _Object$entries$find, _value$likes2;\n\n        let [key, value] = _ref;\n        return {\n          id: key,\n          content: value.content,\n          author: value.author,\n          isAnswered: value.isAnswered,\n          isHighlighted: value.isHighlighted,\n          likeCount: Object.values((_value$likes = value.likes) !== null && _value$likes !== void 0 ? _value$likes : {}).length,\n          likeId: (_Object$entries$find = Object.entries((_value$likes2 = value.likes) !== null && _value$likes2 !== void 0 ? _value$likes2 : {}).find(_ref2 => {\n            let [key, like] = _ref2;\n            return like.authorId === (user === null || user === void 0 ? void 0 : user.id);\n          })) === null || _Object$entries$find === void 0 ? void 0 : _Object$entries$find[0]\n        };\n      });\n      setTitle(databaseRoom.title);\n      setQuestions(parsedQuestion);\n    });\n    return () => {\n      roomRef.off('value');\n    };\n  }, [roomId, user === null || user === void 0 ? void 0 : user.id]);\n  return {\n    questions,\n    title\n  };\n}\n\n_s(useRoom, \"mgxgvybUx5+R+ZEDen/T7kCSRls=\", false, function () {\n  return [useAuth];\n});","map":{"version":3,"names":["useEffect","useState","database","useAuth","useRoom","roomId","user","questions","setQuestions","title","setTitle","roomRef","ref","on","room","databaseRoom","val","firebaseQuestions","parsedQuestion","Object","entries","map","key","value","id","content","author","isAnswered","isHighlighted","likeCount","values","likes","length","likeId","find","like","authorId","off"],"sources":["/home/alexferro/Documents/GitHub/estudos/rocketseat/nlw-together-reactjs/letmeask/src/hooks/useRoom.ts"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { database } from \"../services/firebase\";\nimport { useAuth } from \"./useAuth\";\n\ntype QuestionType = {\n  id: string;\n  author: {\n    name: string;\n    avatar: string;\n  }\n  content: string;\n  isHighlighted: boolean;\n  isAnswered: boolean;\n  likeCount: number;\n  likeId: string | undefined;\n}\n\ntype FirebaseQuestions = Record<string, {\n  author: {\n    name: string;\n    avatar: string;\n  }\n  content: string;\n  isHighlighted: boolean;\n  isAnswered: boolean;\n  likes: Record<string, {\n    authorId: string;\n  }>\n}>\n\nexport function useRoom(roomId : string){\n    const { user } = useAuth();\n    const [questions, setQuestions] = useState<QuestionType[]>([])\n    const [title, setTitle] = useState('');\n\n\n    useEffect(() => {\n      const roomRef = database.ref(`rooms/${roomId}`);\n      \n      roomRef.on('value', room => {\n        const databaseRoom = room.val();\n        const firebaseQuestions: FirebaseQuestions = databaseRoom.questions  ?? {};\n\n        const parsedQuestion = Object.entries(firebaseQuestions).map(([key, value]) => {\n          return {\n            id: key,\n            content: value.content,\n            author: value.author,\n            isAnswered: value.isAnswered,\n            isHighlighted: value.isHighlighted,\n            likeCount: Object.values(value.likes ?? {}).length,\n            likeId: Object.entries(value.likes ?? {}).find(([key, like]) => like.authorId === user?.id)?.[0],\n          }\n        })\n        setTitle(databaseRoom.title)\n        setQuestions(parsedQuestion)\n      })\n\n      return () => {\n        roomRef.off('value');\n      }\n\n    }, [roomId, user?.id])\n\n    return {questions, title}\n}"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,OAAT,QAAwB,WAAxB;AA4BA,OAAO,SAASC,OAAT,CAAiBC,MAAjB,EAAiC;EAAA;;EACpC,MAAM;IAAEC;EAAF,IAAWH,OAAO,EAAxB;EACA,MAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAiB,EAAjB,CAA1C;EACA,MAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;EAGAD,SAAS,CAAC,MAAM;IACd,MAAMW,OAAO,GAAGT,QAAQ,CAACU,GAAT,CAAc,SAAQP,MAAO,EAA7B,CAAhB;IAEAM,OAAO,CAACE,EAAR,CAAW,OAAX,EAAoBC,IAAI,IAAI;MAAA;;MAC1B,MAAMC,YAAY,GAAGD,IAAI,CAACE,GAAL,EAArB;MACA,MAAMC,iBAAoC,4BAAGF,YAAY,CAACR,SAAhB,yEAA8B,EAAxE;MAEA,MAAMW,cAAc,GAAGC,MAAM,CAACC,OAAP,CAAeH,iBAAf,EAAkCI,GAAlC,CAAsC,QAAkB;QAAA;;QAAA,IAAjB,CAACC,GAAD,EAAMC,KAAN,CAAiB;QAC7E,OAAO;UACLC,EAAE,EAAEF,GADC;UAELG,OAAO,EAAEF,KAAK,CAACE,OAFV;UAGLC,MAAM,EAAEH,KAAK,CAACG,MAHT;UAILC,UAAU,EAAEJ,KAAK,CAACI,UAJb;UAKLC,aAAa,EAAEL,KAAK,CAACK,aALhB;UAMLC,SAAS,EAAEV,MAAM,CAACW,MAAP,iBAAcP,KAAK,CAACQ,KAApB,uDAA6B,EAA7B,EAAiCC,MANvC;UAOLC,MAAM,0BAAEd,MAAM,CAACC,OAAP,kBAAeG,KAAK,CAACQ,KAArB,yDAA8B,EAA9B,EAAkCG,IAAlC,CAAuC;YAAA,IAAC,CAACZ,GAAD,EAAMa,IAAN,CAAD;YAAA,OAAiBA,IAAI,CAACC,QAAL,MAAkB9B,IAAlB,aAAkBA,IAAlB,uBAAkBA,IAAI,CAAEkB,EAAxB,CAAjB;UAAA,CAAvC,CAAF,yDAAE,qBAAsF,CAAtF;QAPH,CAAP;MASD,CAVsB,CAAvB;MAWAd,QAAQ,CAACK,YAAY,CAACN,KAAd,CAAR;MACAD,YAAY,CAACU,cAAD,CAAZ;IACD,CAjBD;IAmBA,OAAO,MAAM;MACXP,OAAO,CAAC0B,GAAR,CAAY,OAAZ;IACD,CAFD;EAID,CA1BQ,EA0BN,CAAChC,MAAD,EAASC,IAAT,aAASA,IAAT,uBAASA,IAAI,CAAEkB,EAAf,CA1BM,CAAT;EA4BA,OAAO;IAACjB,SAAD;IAAYE;EAAZ,CAAP;AACH;;GAnCeL,O;UACKD,O"},"metadata":{},"sourceType":"module"}